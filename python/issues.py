"""[TASK] issues  #2."""

# ### Общие вопросы
# 1. Что такое Issues на GitHub и для чего они используются?
#     - Это инструмент для отслеживания задач, багов, который используется для планирования и управления работой в репозиториях GitHub.
# 2. Чем Issues отличаются от других инструментов управления задачами?
#     - Это простой и гибкий трекер задач, интегрированный с самим кодом, пул-реквестами, коммитами и проектами. В отличие от корпоративных систем (например, Jira), Issues не имеют избыточных настроек, категорий и атрибутов, а их кастомизация достигается с помощью меток, майлстонов, связанных задач и автоматизации через GitHub.
# 3. Какие основные компоненты (поля) есть у каждого Issue?
#     - Title (Заголовок)
#     - Description (Описание)
#     - Labels (Метки)
#     - Assignees (Ответственные)
#     - Milestone (Веха)
#     - Projects (Связанные проекты)
#     - Comments (Комментарии)
#     - Issue type (Тип, если настроено в организации)
#     - State (Open/Closed — открыт/закрыт)
#     - Linked issues / Pull requests (Связанные задачи или PR)
#
# ### Создание Issues
#
# 1. Как создать новое Issue в репозитории?
#     1) Заходим в файл в репозитории
#     2) ЛКМ+shift-copy permalink
#     3) Issues - New issue - Выбираем тип Issues
#     4) Заполняем title и описание Issues
#     5) Issues - set milestone
#     6) Submit new issue
# 2. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#     - Указать ссылку на файл кода для issues
#     - Описание и название файла кода
#     - Описание проблемы или задачи
#     - Шаги для воспроизведения (если это баг)
#     - Ожидаемое и фактическое поведение
#     - Скриншоты или логи при необходимости
#     - Возможные решения или идеи
#     - Ссылки на связанные задачи или обсуждения
# 3. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#     - Можно добавить стандартные и кастомные
#     - Стандартные: bug, enhancement, documentation, duplicate, good first issue, help wanted, invalid, question, wontfix
# 4. Как прикрепить Assignees (ответственных) к Issue?
#     - Assignees - выбрать пользователя или группу
#
# ### Работа с Issues
#
# 1. Как использовать Labels для классификации задач?
#     - Выставить теги в Labels в окне Issues и поставить нужные теги
# 2. Для чего нужен Milestone, и как связать его с Issue?
#     - Для того, чтобы привязать Issue к дате или определенному этапу
#     - Выставить дату или этап в Milestone в окне Issues
# 3. Как привязать Issue к пул-реквесту (Pull Request)?
#     - При создании pull request или коммита указать номер Issue в #123, либо использовать ключевые слова ("Closes #123", "Fixes #123")
#     - Можно вручную добавить связь через панель Linked issues
# 4. Как добавить комментарий к существующему Issue?
#     - В конце страницы Issue в поле комментария — написать текст и нажать "Comment", чтобы добавить сообщение
#
# ### Закрытие и завершение Issues
#
# 1. Как закрыть Issue вручную?
#     1) Заходим в Issues
#     2) Находим Файл
#     3) Ветка - main
#     4) Редактируем файл
#     5) Commit changes
#     6) Commit message - тайтл Issues, Extended description - closes (Номер ошибки)
#     7) Sing off and commit changes
# 2. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#     - Если в сообщении коммита или pull request использовать ключевые слова: "Closes #номер", "Fixes #номер"
# 3. Как повторно открыть закрытое Issue, если работа ещё не завершена?
#     - Вкладка Issue - Выбрать Issue - Нажать "Reopen issue"
#
# ### Фильтрация и поиск
#
# 1. Как найти все открытые или закрытые Issues в репозитории?
#     - Во вкладке Issues по нажать "Closed" или в поиске, напишите is:open или is:closed для фильтрации.
# 2. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#     - В поиске написать, например: label:bug assignee:username milestone:"1.0.0", либо использовать фильтры сверху (Labels, Assignee, Milestones, Projects).
# 3. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#     - В меню ("Sort") на вкладке Issues: доступны опции по дате создания, обновления, количеству комментариев и т.д. Приоритет обычно выставляется ярлыками ("priority: high")
#
# ### Интеграции и автоматизация
#
# 1. Как настроить автоматические уведомления о новых или изменённых Issues?
#     - В репозитории нажать "Watch" — выбрать интересующий вариант уведомлений
# 2. Что такое Projects в контексте GitHub, и как связать их с Issues?
#     - Projects - это доски для визуального управления задачами. Issues можно добавлять в проекты для отслеживания статуса и автоматизации рабочих процессов.
# 3. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#     - GitHub Actions (боты и скрипты для автоматизации работ)
#     - Webhooks для интеграции с внешними сервисами
#     - Сторонние боты типа probot, интеграция с Jira, Trello
#
# ### Коллаборация
#
# 1. Как упомянуть другого пользователя в комментарии к Issue?
#     - Использовать @username
# 2. Как запросить дополнительные данные или уточнения у автора Issue?
#     - Использовать упоминание в комментарии. Можно дополнительно добавить label "needs info"
# 3. Что делать, если Issue неактуально или его нужно объединить с другим?
#     - Для устаревших задач — закройте Issue с пометкой: "Invalid", "Outdated", кратко описав причину
# Для объединения — оставьте ссылку на дубликат ("Duplicate of #номер"), закройте и используйте ярлык "duplicate"
#
# ### Практические аспекты
#
# 1. Как использовать шаблоны для создания Issues?
#     - В разделе Settings репозитория можно добавить шаблоны Issue (Issue Templates) для разных типов задач
# 2. Что такое Linked Issues, и как создать связь между задачами?
#     - Linked Issues - это задачи, логически связанные между собой (например, подзадачи). Связать можно с помощью панели "Linked issues", а также упоминания через #номер в тексте
# 3. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
#     - Количество открытых/закрытых задач
#     - Время выполнения задачи
#     - Активность по assigned/closed issues
#     - Число комментариев
# 4. Какие best practices рекомендуются при работе с Issues в команде?
#     - Используйте шаблоны и метки для стандартизации.
#     - Назначайте ответственных
#     - Описывайте задачи понятно, структурированно и без двусмысленности
#     - Переводите устаревшие/дублирующие Issues в архив
#     - Интегрируйте Issues в pipeline разработки через Pull Request’ы, Projects и автоматизацию
