"""SENATOROVAI/intro-cs/issues/6."""

# 1) Как понять, что домашка пришла?
#     - В чате homework будет сообщение прими пул.
# 2) Как принять домашку?
#     - Заходим в Github desktop, затем fetch origin
#     - Нажимаем history, смотрим ходим в самый свежий коммит
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
#     - History - просмотр истории коммитов
#     - Amend commit - изменение последнего коммита
#     - Reset to commit - отменяет все коммиты, которые идут после укзанного коммита
#     - Checkout commit – перемещение по коммитам
#     - Reorder commit – изменить порядок коммитов
#     - Revert changes in commit – создает новый коммит, который отменяет изменения, внесенные в выбранном коммите, не удаляя сам коммит из истории
#     - Create tag... – создает тег для пометки определенного коммита
#     - Create branch from commit – позволяет создать новую ветку, начиная с выбранного коммита
#     - Cherry-pick commit – копирует коммит из одной ветки в другую
#     - Copy SHA – копирует уникальный идентификатор коммита
#     - View on GitHub – открывает выбранный коммит на сайте GitHub
#     - Copy tag - копирует имя выбранного тега
# 3.1) Где брать ссылку на коммит? куда её отправлять?
#     - GitHub вкладка коммит
#     - Review запросы?
# 4) Что такое файл лога?
#     - Файл для записи прогресса в учебе
# 4.1) Когда нужно его пушить?
#     - Когда сделали домашку
# 5) Что такое интерпритатор?
#     - Программа, которая читает и выполняет код
# 6) Где можно выбрать интерпритатор?
#     - base
#     - Select kernel
#     - или Ctrl + Shift + P, затем Python: Select Interpreter
# 7) Что такое модуль?
#     - Файл с расширением .py, который содержит код и может быть повторно использован в других программах
# 8) Как создать и отправить коммит?
#     - GitHub Desktop - название коммита - commit to main - push origin
# 9) Как посмотреть что коммит точно отправлен и находится в github?
#     - History - commit - view on github
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
#     - pre-commit run --all-files
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#     - black — автоформаттер Python кода согласно единому стилю PEP8
#     - flake8 — для проверки стиля и потенциальных ошибок
#     - mypy — анализатор для проверки соответствия типов
#     - nbqa-pydocstyle — проверяет соответствие docstring документации в notebook-коде внутренним стандартам
#     - codespell — ищет орфографические ошибки и опечатки в коде
#     - pylint — проверяет стиль, ошибки и сложность кода
# 11) Как узнать какой именно линтер не прошёл проверку?
#     - Failed напротив линтера, который не прошел проверку
# 12) Линтер Pylint видит markdown?
#     - нет
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
#     - да, линтер не видит markdown и номер ячейки может при проверке линтера может отличаться
# 14) Где посмотреть номер ячейки в vscode?
#   - внизу справа
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#     - GitHub принимает файлы .ipynb в формате JSON. Jupyter Notebook с расширением .ipynb представляет файл в формате JSON.
# 16) Где посмотреть в какой ячейке ошибка?
#     - В терминале после запуска pre-commit run --all-files сообщение об ошибке и номере ячейки
# 17) Как запустить терминал?
#     - View - Terminal
#     - Ctrl+`
# 18) Что такое линтер?
#     -  Программа, которая проверяет код на наличие ошибок и несоответствий стандартам написания кода
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#     - https://pylint.readthedocs.io/en/stable/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
#     - pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
#     - Описание файла. Да
# 21.1) С какой  git команды начинается утро программиста?
#     - git pull, git status
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
#     - current repository - open in VSCode
# 23) Что такое stash?
#   Общее объяснение концепции.
#     - Команда в Git, которая позволяет временно сохранить все сделанные, но ещё не зафиксированные изменения в коде
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#     - git stash
#   Кнопка в vs code: Ctrl + Shift + G
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#     - git stash apply
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#     - Git commit — для постоянного сохранения изменений
#     - Git stash — для временного сохранения изменений
#     - Git commit: изменения полностью готовы; для общего репозитория и совместной работы
#     - Git stash: когда надо переключить на другую ветку, а текущий код не готов; неполные изменения; если нужно отложить работу
# 23.4) Как просмотреть список сохраненных стэшей?
#     - git stash list
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#     - git stash drop
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#     - Срочное переключение задачи
#     - Экспериментальные изменения
#     - Создание новой ветки из stash
#     - Переключение веток
# 24) Где посмотреть что есть конфликт в файлах?
#     - Github Desktop восклицательный знак напротив файла
# 24.1) Когда он появляется?
#     - Когда несколько пользователей хотят сохранить изменения в одном файле и гит не понимает какие изменения сохранить
# 25) Как решить конфликт в файлах?
#     1. Stash changes (сохраняем локальные изменения)
#     2. Fetch origin (принимаем изменения из интернета)
#     3. Stashed changes - restore (восстанавливаем локальные изменения)
#     4. Open in VSCode
#     5. Решаем конфликт
#     6. Resolve in merge editor
#     7. Complete merge
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
#     - Зеленое гитхаб, синие локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
#     - Да
# 27.1) Что может произойти когда stash восстановите после принятия pull?
#     - git уведомит о конфликте
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
#     1. Принять изменения с гитхаба
#     2. Принять локальные изменения
#     3. Оба изменения
#     4. Ручные правки
# 29) Что делает кнопка complete merge?
#     - Завершить слияние (конфликт)
# 30) В какой чат нужно писать если остались вопросы?
#     - help me
# 31) Что такое FORK? Зачем его делают?
#     - Копирование репозитория
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
#     - Github desktop - clone repository - clone
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#     - 99%. Преподаватель или студенты
# 34) Как создать файл в vs code?
#     - File - New file
# 35) Файл лога нужно заполнять в конце каждого урока?
#     - Да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
#     - jupyter nbconvert --to script notebook.ipynb
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
#     - Программа, которая автоматизируют установку, обновление, настройку и удаление программного обеспечения и библиотек. Conda
# 3) Почему расширение py лучше чем ipynb?
#     - .py файлы удобно использовать при контроле версий с помощью Git, так как они являются обычными текстовыми файлами
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
#     - PEP 8 — это официальный стиль написания кода для языка Python
# 4.1) линтеры проверяют на соблюдение pep8?
#     - Да
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#     - snake_case
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
#     - да
# 4.4) Зачем и где мы используем андерскор _
#     - Игнорирование значений
#     - Для обозначения внутренних/приватных переменных
#     - Как часть "магических" методов Python (init)
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#     - да

# 1. Как включить автосохранение данных в VSCODE?
#     - File - autosave
# 2. Как настроить перенос строки?
#     - Preferences - settings - wordwrapcolumn
# 3. Сколько символов по pep8 разрешено на строке?
#     - 79
# 4. Какие способы переноса строк показаны в видео:
#     - 4.4, 4.6
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
#     - Нижняя панель - Problems
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
#     - Слева три кружочка
#     - Source control - Commit and push
#     - Домашка принимается кнопкой Pull
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
#     - Git - система контроля версий
#     - Локальный
#     - Да
# 8. Как вставить картинку в маркдаун?
#     - Ctrl+V
# 9. Где посмотреть длину строки в vs code?
#     - Внизу окна VS Code в строке состояния
# 10. Как поменять тип ячейки с питона на маркдаун?
#     - В ячейке справа снизу
# 11. Как запустить сразу все ячейки в юпитере?
#     - Run all наверху
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
#     - <img hre ссылка размер>
#     - Да
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
#     - Shift+enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
#     - Show cell line numbers или клавиша L
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
#     - Перейти на ячейку с ошибкой
#     - Нажать на "Go To"
# 16. Как очистить вывод ячеек которые уже запущены?
#     - Clear all outputs
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
#     - Split edit
#     - Разделение редактора на несколько панелей для работы с разными файлами одновременно
# 18. Каким сочетанием убирается левый сайдбар?
#     - Ctrl+B
# 19. Кнопка два листочка это наши локальные файлы?
#     - Да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
#     - Name 'Dict' in not defined
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
#     - Да
# 22. Что такое валидация?
#     - Проверка кода на правильность
# 23. Что такое трассировка ошибки?
#     - Текстовое представление ошибки
# 24. Что значит отвалился интерпритатор?
#     - Интерпритатор завершил работу из-за ошибки
